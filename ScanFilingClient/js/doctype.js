// Generated by CoffeeScript 1.6.3
var DocTypeMgr;

DocTypeMgr = (function() {
  function DocTypeMgr() {
    var _this = this;
    $('.mustTable').editableTableWidget();
    $('.mustTable').on('change', function() {
      return _this.tableOnChange();
    });
    this.docUniqName = location.search.split('docuniq=')[1];
    this.getScanInfo();
    $(window).resize(function() {
      return _this.resizeImageAndCanvas();
    });
    $(".pageImage").load(function() {
      return _this.resizeImageAndCanvas();
    });
    this.canvasMarquee = new CanvasMarquee($(".pageImageCanvas")[0], $(".pageImageCanvas").offset(), "rgba(50,50,0,.3)");
  }

  DocTypeMgr.prototype.getScanInfo = function() {
    var _this = this;
    if (typeof this.docUniqName === "undefined") {
      return;
    }
    return $.ajax('http://localhost:8080/scandocs/get/' + this.docUniqName, {
      type: 'GET',
      dataType: 'json',
      error: function(jqXHR, textStatus, errorThrown) {
        return $('.statusBox').text("Can't get scandocs: " + textStatus);
      },
      success: function(data, textStatus, jqXHR) {
        _this.scanInfo = data;
        _this.showDocInfo();
        _this.getDocTypeList();
        return _this.getDocTypeInfo(_this.scanInfo.scanDocInfo.docTypeFiled);
      }
    });
  };

  DocTypeMgr.prototype.getDocTypeList = function() {
    var _this = this;
    return $.ajax('http://localhost:8080/doctypes/list', {
      type: 'GET',
      dataType: 'json',
      error: function(jqXHR, textStatus, errorThrown) {
        return $('.statusBox').text("Can't get doctypes list: " + textStatus);
      },
      success: function(data, textStatus, jqXHR) {
        return _this.docTypeList = data;
      }
    });
  };

  DocTypeMgr.prototype.getDocTypeInfo = function(docType) {
    var _this = this;
    docType = "AA Savings";
    return $.ajax('http://localhost:8080/doctypes/get/' + this.convertToSlug(docType), {
      type: 'GET',
      dataType: 'json',
      error: function(jqXHR, textStatus, errorThrown) {
        return $('.statusBox').text("Can't get doctype: " + docType + " " + textStatus);
      },
      success: function(data, textStatus, jqXHR) {
        _this.docTypeInfo = data;
        _this.showDocTypeInfo();
        return $('.statusBox').text("Ok");
      }
    });
  };

  DocTypeMgr.prototype.nextPage = function() {
    if (this.curPageNum < this.curDocInfo.PageCount) {
      return this.showDocPage(this.curPageNum + 1);
    }
  };

  DocTypeMgr.prototype.showDocInfo = function() {
    var fileName;
    if (typeof this.scanInfo === "undefined") {
      return;
    }
    this.curPageNum = 1;
    fileName = "file:" + this.scanInfo.scanDocInfo.scanPageImageFileBase + "_" + this.curPageNum + ".png";
    return $(".pageImage").attr("src", fileName);
  };

  DocTypeMgr.prototype.showDocTypeInfo = function() {
    if (typeof this.docTypeInfo === "undefined") {
      $('#docTypeEdit').attr('value', "");
    } else {
      $('#docTypeEdit').attr('value', this.docTypeInfo.docTypeName);
    }
    this.createTable("#mustHaveTable", this.docTypeInfo.mustHaveTexts, "Y");
    return this.showRegionsOnImage();
  };

  DocTypeMgr.prototype.createTable = function(tableClass, patternTextList, tablePrefix) {
    var rowIdx, tblStr, tdS, txtData, _i, _len, _results;
    $(tableClass).empty();
    tdS = "<td tabindex='1' class='mustTableCell' ";
    _results = [];
    for (rowIdx = _i = 0, _len = patternTextList.length; _i < _len; rowIdx = ++_i) {
      txtData = patternTextList[rowIdx];
      tblStr = "<tr>" + tdS + ("id='" + tablePrefix + rowIdx + "txt'") + (">" + txtData.textToMatch + "</td>") + tdS + ("id='" + tablePrefix + rowIdx + "tlx'") + (">" + txtData.textBounds.topLeftXPercent + "</td>") + tdS + ("id='" + tablePrefix + rowIdx + "tly'") + (">" + txtData.textBounds.topLeftYPercent + "</td>") + tdS + ("id='" + tablePrefix + rowIdx + "wid'") + (">" + txtData.textBounds.widthPercent + "</td>") + tdS + ("id='" + tablePrefix + rowIdx + "hgt'") + (">" + txtData.textBounds.heightPercent + "</td>") + tdS + ("id='" + tablePrefix + rowIdx + "rect'") + "><object width=30 height=30 data='img/appbar.edit.svg' type='image/svg+xml'></object></td>" + "</tr>";
      _results.push($(tableClass).append(tblStr));
    }
    return _results;
  };

  DocTypeMgr.prototype.showRegionsOnImage = function() {
    if (typeof this.docTypeInfo === "undefined") {
      return;
    }
    return this.showRegions(".pageImage", this.docTypeInfo.mustHaveTexts, "Y");
  };

  DocTypeMgr.prototype.showRegions = function(imageClass, patternTextList, tablePrefix) {
    var canvas, context, hgt, rowIdx, tlx, tly, txtData, wid, _i, _len, _results;
    canvas = $(".pageImageCanvas")[0];
    context = canvas.getContext("2d");
    context.clearRect(0, 0, canvas.width, canvas.height);
    context.fillStyle = "rgba(0,80,0,.2)";
    _results = [];
    for (rowIdx = _i = 0, _len = patternTextList.length; _i < _len; rowIdx = ++_i) {
      txtData = patternTextList[rowIdx];
      tlx = parseInt($("#" + tablePrefix + rowIdx + "tlx").text());
      tly = parseInt($("#" + tablePrefix + rowIdx + "tly").text());
      wid = parseInt($("#" + tablePrefix + rowIdx + "wid").text());
      hgt = parseInt($("#" + tablePrefix + rowIdx + "hgt").text());
      _results.push(context.fillRect(tlx, tly, wid, hgt));
    }
    return _results;
  };

  DocTypeMgr.prototype.convertToSlug = function(text) {
    return text.replace("/[^\w ]+/g", '').replace("/ +/g", '-');
  };

  DocTypeMgr.prototype.resizeImageAndCanvas = function() {
    $(".pageImage").width($(".pageDisplay").width());
    $(".pageImageCanvas").width($(".pageDisplay").width());
    return $(".pageImageCanvas").height($(".pageImage").height());
  };

  DocTypeMgr.prototype.tableOnChange = function() {
    return this.showRegionsOnImage();
  };

  return DocTypeMgr;

})();

$(document).ready(function() {
  var docTypeMgr;
  return docTypeMgr = new DocTypeMgr();
});
