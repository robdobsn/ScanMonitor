// Generated by CoffeeScript 1.6.3
var CanvasMarquee;

CanvasMarquee = (function() {
  function CanvasMarquee(canvas, canvasOffset, rectColour) {
    var _this = this;
    this.canvas = canvas;
    this.canvasOffset = canvasOffset;
    this.rectColour = rectColour;
    this.canvasContext = this.canvas.getContext("2d");
    this.canvas.onmousedown = function(e) {
      return _this.canvasOnMouseDown(e);
    };
    this.canvas.onmouseup = function(e) {
      return _this.canvasOnMouseUp(e);
    };
    this.canvas.onmousemove = function(e) {
      return _this.canvasOnMouseMove(e);
    };
  }

  CanvasMarquee.prototype.canvasOnMouseDown = function(mouseEv) {
    var curpos;
    this.mouseDown = true;
    curpos = this.getCursorPosition(mouseEv);
    this.initPos = curpos;
    this.canvasContext.clearRect(0, 0, this.canvas.width, this.canvas.height);
    this.canvasContext.fillStyle = this.rectColour;
    return this.canvasContext.fillRect(this.initPos[0], this.initPos[1], 1, 1);
  };

  CanvasMarquee.prototype.canvasOnMouseUp = function(mouseEv) {
    var curpos;
    this.mouseDown = false;
    return curpos = this.getCursorPosition(mouseEv);
  };

  CanvasMarquee.prototype.canvasOnMouseMove = function(mouseEv) {
    var curpos;
    if (!this.mouseDown) {
      return;
    }
    curpos = this.getCursorPosition(mouseEv);
    this.canvasContext.clearRect(0, 0, this.canvas.width, this.canvas.height);
    this.canvasContext.fillStyle = this.rectColour;
    return this.canvasContext.fillRect(this.initPos[0], this.initPos[1], curpos[0] - this.initPos[0], curpos[1] - this.initPos[1]);
  };

  CanvasMarquee.prototype.getCursorPosition = function(mouseEv) {
    var x, y;
    if (mouseEv.pageX !== void 0 && mouseEv.pageY !== void 0) {
      x = mouseEv.pageX;
      y = mouseEv.pageY;
    } else {
      x = mouseEv.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;
      y = mouseEv.clientY + document.body.scrollTop + document.documentElement.scrollTop;
    }
    x -= this.canvasOffset.left;
    y -= this.canvasOffset.top;
    x = x * this.canvas.width / this.canvas.clientWidth;
    y = y * this.canvas.height / this.canvas.clientHeight;
    return [Math.floor(x), Math.floor(y)];
  };

  return CanvasMarquee;

})();
